
Test "Standard Upgrade"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    ControllerImpl Deploy ScenarioG1 ScenControllerG1
    Unitroller SetPendingImpl ScenControllerG1
    ControllerImpl ScenControllerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ScenControllerG1)
    ListedVToken ZRX cZRX
    ListedVToken DAI vDAI
    -- Upgrade to G2
    ControllerImpl Deploy StandardG2 StandardControllerG2
    Unitroller SetPendingImpl StandardControllerG2
    ControllerImpl StandardControllerG2 BecomeG2
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address StandardControllerG2)
    -- Upgrade to G3
    ControllerImpl Deploy ScenarioG3 ScenControllerG3
    Unitroller SetPendingImpl ScenControllerG3
    ControllerImpl ScenControllerG3 BecomeG3 1e18 [cZRX vDAI]
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ScenControllerG3)

Test "Standard Upgrade, then downgrade then upgrade again"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    ControllerImpl Deploy ScenarioG1 ScenControllerG1
    Unitroller SetPendingImpl ScenControllerG1
    ControllerImpl ScenControllerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ScenControllerG1)
    ListedVToken ZRX cZRX
    ListedVToken DAI vDAI
    -- Upgrade to G2
    ControllerImpl Deploy StandardG2 ControllerG2
    Unitroller SetPendingImpl ControllerG2
    ControllerImpl ControllerG2 BecomeG2
    Controller SetPauseGuardian Coburn
    Assert Equal (Controller PauseGuardian) (Address Coburn)
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ControllerG2)
    -- Upgrade to G3
    ControllerImpl Deploy ScenarioG3 ScenControllerG3
    Unitroller SetPendingImpl ScenControllerG3
    ControllerImpl ScenControllerG3 BecomeG3 1e18 [cZRX vDAI]
    Assert Equal (Controller PauseGuardian) (Address Coburn)
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ScenControllerG3)
    -- Downgrade to G2
    Unitroller SetPendingImpl ControllerG2
    ControllerImpl ControllerG2 BecomeG2
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ControllerG2)
    -- Upgrade to G3 again
    Unitroller SetPendingImpl ScenControllerG3
    ControllerImpl ScenControllerG3 BecomeG3 1e18 []
    Assert Equal (Controller GetVtxMarkets) [(Address cZRX) (Address vDAI)]
    Assert Equal (Controller PauseGuardian) (Address Coburn)
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ScenControllerG3)

Test "Once become, can become again"
    -- TODO: See why ABI is broken here
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ControllerImpl Deploy ScenarioG1 ScenControllerG1
    Unitroller SetPendingImpl ScenControllerG1
    ControllerImpl ScenControllerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ScenControllerG1)
    ControllerImpl Deploy ScenarioG1 ScenControllerG1_2
    Unitroller SetPendingImpl ScenControllerG1_2
    ControllerImpl ScenControllerG1_2 BecomeG1 (PriceOracle Address) 0.4 40
    Assert Equal (Controller CloseFactor) 0.4
    Assert Equal (Controller MaxAssets) 40
    Assert Equal (Controller Implementation) (Address ScenControllerG1_2)

--G1 recome
Test "Recome has default values"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ControllerImpl Deploy ScenarioG1 ScenControllerG1
    Unitroller SetPendingImpl ScenControllerG1
    ControllerImpl ScenControllerG1 Recome
    Assert Equal (Controller CloseFactor) 0.0
    Assert Equal (Controller MaxAssets) 0
    Assert Equal (Controller Implementation) (Address ScenControllerG1)

--G1 bork
Test "Bork and unbork"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ControllerImpl Deploy ScenarioG1 ScenControllerG1
    -- Set a normal impl
    Unitroller SetPendingImpl ScenControllerG1
    ControllerImpl ScenControllerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ScenControllerG1)
    -- Now move to a borked one that's bad
    ControllerImpl Deploy Borked MyBork
    Unitroller SetPendingImpl MyBork
    ControllerImpl MyBork BecomeG1 (PriceOracle Address) 0.4 40
    Assert ReadRevert (Controller CloseFactor) "revert"
    Assert Equal (Controller Implementation) (Address MyBork)
    -- Now change back to the first good one
    Unitroller SetPendingImpl ScenControllerG1
    ControllerImpl ScenControllerG1 Recome
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (Controller Implementation) (Address ScenControllerG1)

Macro CheckUnitrollerStorage implementation
    -- Admin; 0
    Assert Equal (Controller Admin) (Address Root)
    Assert Equal (StorageAt Controller 0 0 "address") (Address Root)
    -- PendingAdmin; 1
    Assert Equal (Controller PendingAdmin) (Address Coburn)
    Assert Equal (StorageAt Controller 1 0 "address") (Address Coburn)
    -- ControllerImplementation; 2
    Assert Equal (Unitroller Implementation) implementation
    Assert Equal (StorageAt Controller 2 0 "address") implementation
    -- PendingControllerImplementation; 3
    -- check as number since casting address 0 is not defined
    Assert Equal (StorageAt Controller 3 0 "number") 0

Macro CheckV1Storage
    -- Oracle; 4
    Assert Equal (Controller PriceOracle) (Address PriceOracle)
    Assert Equal (StorageAt Controller 4 0 "address") (Address PriceOracle)
    -- CloseFactorMantissa; 5
    Assert Equal (Controller CloseFactor) 0.2
    Assert Equal (StorageAt Controller 5 0 "number") 0.2e18
    -- LiquidationIncentiveMantissa; 6
    Assert Equal (Controller LiquidationIncentive) 1
    Assert Equal (StorageAt Controller 6 0 "number") 1e18
    -- MaxAssets; 7
    Assert Equal (Controller MaxAssets) 20
    Assert Equal (StorageAt Controller 7 0 "number") 20
    -- AccountAssets; 8 *
    Assert Equal (StorageAt Controller 8 0 "number") 0
    Assert Equal (StorageAtMapping Controller 8 (Address Geoff) "number") 2
    Assert Equal (StorageAtMapping Controller 8 (Address Geoff) "list(address)") [(Address cZRX) (Address vBAT)]
    Assert Equal (Controller AssetsIn Geoff) [(Address cZRX) (Address vBAT)]
    -- Markets; 9 *
    Assert Equal (StorageAt Controller 9 0 "number") 0
    Assert Equal (StorageAtNestedMapping Controller 9 (Address cZRX) Geoff "marketStruct") [True 0.5 True]
    Assert Equal (StorageAtNestedMapping Controller 9 (Address vBAT) Geoff "marketStruct") [True 0.4 True]
    Assert Equal (StorageAtNestedMapping Controller 9 (Address vBAT) Coburn "marketStruct") [True 0.4 False]
    Assert Equal (Controller CollateralFactor cZRX) 0.5
    Assert Equal (Controller CollateralFactor vBAT) 0.4
    Assert Equal (Controller CheckMembership Geoff cZRX) True
    Assert Equal (Controller CheckMembership Geoff vBAT) True

Macro CheckV2Storage
    -- PauseGuardian; 10
    Assert Equal (Controller PauseGuardian) (Address Coburn)
    Assert Equal (StorageAt Controller 10 0 "address") (Address Coburn)
    -- MintGuardianPaused; 11
    Assert Equal (StorageAt Controller 10 40 "bool") False
    Assert Equal (Controller _MintGuardianPaused) False
    -- BorrowGuardianPaused; 12
    Assert Equal (StorageAt Controller 10 42 "bool") False
    Assert Equal (Controller _BorrowGuardianPaused) False
    -- TransferGuardianPaused; 13
    Assert Equal (StorageAt Controller 10 44 "bool") False
    From Coburn (Controller SetGuardianPaused "Transfer" True)
    Assert Equal (Controller TransferGuardianPaused) True
    Assert Equal (StorageAt Controller 10 44 "bool") True
    Controller SetGuardianPaused "Transfer" False
    -- SeizeGuardianPaused; 14
    Assert Equal (StorageAt Controller 10 46 "bool") False
    From Coburn (Controller SetGuardianPaused "Seize" True)
    Assert Equal (Controller SeizeGuardianPaused) True
    Assert Equal (StorageAt Controller 10 46 "bool") True
    Controller SetGuardianPaused "Seize" False
    --
    -- Pause by market storage
    --
    -- MintGuardianPaused; 15
    Assert Equal (StorageAtMapping Controller 11 (Address cZRX) "bool") False
    From Coburn (Controller SetGuardianMarketPaused cZRX "Mint" True)
    Assert Equal (Controller MintGuardianMarketPaused cZRX) True
    Assert Equal (StorageAtMapping Controller 11 (Address cZRX) "bool") True
    Controller SetGuardianMarketPaused cZRX "Mint" False
    -- BorrowGuardianPaused; 16
    Assert Equal (StorageAtMapping Controller 12 (Address cZRX) "bool") False
    From Coburn (Controller SetGuardianMarketPaused cZRX "Borrow" True)
    Assert Equal (Controller BorrowGuardianMarketPaused cZRX) True
    Assert Equal (StorageAtMapping Controller 12 (Address cZRX) "bool") True
    Controller SetGuardianMarketPaused cZRX "Borrow" False

Macro CheckV3Storage
    -- AllMarkets; 17
    Assert Equal (StorageAt Controller 13 0 "number") 2
    -- TODO: StorageAtArray Controller 13?
    -- VtxRate; 18
    Assert Equal (StorageAt Controller 14 0 "number") 1e18
    -- VtxSpeeds; 19
    Assert Equal (StorageAt Controller 15 0 "number") 0
    -- VtxSupplyState; 20
    Assert Equal (StorageAt Controller 16 0 "number") 0
    -- VtxBorrowState; 21
    Assert Equal (StorageAt Controller 17 0 "number") 0
    -- VtxSupplierIndex; 22
    Assert Equal (StorageAt Controller 18 0 "number") 0
    -- VtxBorrowerIndex; 23
    Assert Equal (StorageAt Controller 19 0 "number") 0
    -- VtxAccrued; 24
    Assert Equal (StorageAt Controller 20 0 "number") 0

-- Times out coverage, disable for now - ideally set flag to not run in coverage
Pending "Keeps all storage"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ControllerImpl Deploy StandardG1 ControllerG1
    Unitroller SetPendingImpl ControllerG1
    ControllerImpl ControllerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Controller SetPendingAdmin Coburn
    ---
    NewVToken ZRX cZRX delegatorType:VErc20Delegator vTokenType:VErc20Delegate
    NewVToken BAT vBAT delegatorType:VErc20Delegator vTokenType:VErc20Delegate
    Give vBAT 10e18 BAT -- Faucet some bat to borrow
    Support cZRX collateralFactor:0.5
    Support vBAT collateralFactor:0.4
    Prep Geoff Some ZRX cZRX
    Mint Geoff 100e18 cZRX
    EnterMarkets Geoff cZRX vBAT
    Borrow Geoff 1e18 vBAT
    --
    CheckUnitrollerStorage (Address ControllerG1)
    CheckV1Storage
    --
    ControllerImpl Deploy StandardG2 ControllerG2
    Unitroller SetPendingImpl ControllerG2
    Assert Equal (Unitroller PendingImplementation) (Address ControllerG2)
    Assert Equal (StorageAt Controller 3 0 "address") (Address ControllerG2)
    ControllerImpl ControllerG2 BecomeG2
    Controller SetPauseGuardian Coburn
    --
    CheckUnitrollerStorage (Address ControllerG2)
    CheckV1Storage
    CheckV2Storage
    --
    ControllerImpl Deploy StandardG3 ControllerG3
    Unitroller SetPendingImpl ControllerG3
    ControllerImpl ControllerG3 BecomeG3 1e18 [cZRX vBAT]
    --
    CheckUnitrollerStorage (Address ControllerG3)
    CheckV1Storage
    CheckV2Storage
    CheckV3Storage
    --
    ControllerImpl Deploy Standard ControllerG4
    Unitroller SetPendingImpl ControllerG4
    ControllerImpl ControllerG4 Become
    --
    CheckUnitrollerStorage (Address ControllerG4)
    CheckV1Storage
    CheckV2Storage
    CheckV3Storage
