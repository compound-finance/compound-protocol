-- Enter and Exit Markets Tests

Test "Enter Markets Idempotent"
	NewController
	Assert Equal (Controller MembershipLength Geoff) Zero
	Assert Equal (Controller AssetsIn Geoff) []
	ListedVToken ZRX cZRX
	EnterMarkets Geoff cZRX
	Assert Log MarketEntered (vToken (Address cZRX)) (account (Address Geoff))
	Assert Equal (Controller MembershipLength Geoff) (Exactly 1)
	Assert True (Controller CheckMembership Geoff cZRX)
	ListedVToken OMG cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Controller MembershipLength Geoff) (Exactly 2)
	Assert True (Controller CheckMembership Geoff cZRX)
	Assert True (Controller CheckMembership Geoff cOMG)
	Assert Equal (Controller AssetsIn Geoff) [(Address cZRX) (Address cOMG)]

Test "Entered Market Must Be Supported"
	NewController
	Assert Equal (Controller MembershipLength Geoff) Zero
	ListedVToken ZRX cZRX
	EnterMarkets Geoff cZRX
	Assert Equal (Controller MembershipLength Geoff) (Exactly 1)
	NewVToken OMG cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Controller MembershipLength Geoff) (Exactly 1)
	Assert True (Controller CheckMembership Geoff cZRX)
	Assert False (Controller CheckMembership Geoff cOMG)
	Support cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Controller MembershipLength Geoff) (Exactly 2)
	Assert True (Controller CheckMembership Geoff cZRX)
	Assert True (Controller CheckMembership Geoff cOMG)

Test "Exit single market"
	NewController
	ListedVToken ZRX cZRX
	EnterMarkets Geoff cZRX
	Assert Equal (Controller AssetsIn Geoff) [(Address cZRX)]
	ExitMarket Geoff cZRX
	Assert Equal (Controller AssetsIn Geoff) []

Test "Exit non-entered market"
	NewController
	ListedVToken ZRX cZRX
	ExitMarket Geoff cZRX
	Assert Equal (Controller AssetsIn Geoff) []

Test "Exit one of two market from the front"
	NewController
	ListedVToken ZRX cZRX
	ListedVToken OMG cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Controller AssetsIn Geoff) [(Address cZRX) (Address cOMG)]
	ExitMarket Geoff cZRX
	Assert Equal (Controller AssetsIn Geoff) [(Address cOMG)]

Test "Exit one of two market from the back"
	NewController
	ListedVToken ZRX cZRX
	ListedVToken OMG cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Controller AssetsIn Geoff) [(Address cZRX) (Address cOMG)]
	ExitMarket Geoff cOMG
	Assert Equal (Controller AssetsIn Geoff) [(Address cZRX)]

Test "Exit multiple markets"
	NewController
	ListedVToken ZRX cZRX
	ListedVToken OMG cOMG
	ListedVToken BAT vBAT
	ListedVToken REP cREP
	ListedVToken DAI vDAI
	EnterMarkets Geoff cZRX cOMG vBAT cREP vDAI
	Assert Equal (Controller AssetsIn Geoff) [(Address cZRX) (Address cOMG) (Address vBAT) (Address cREP) (Address vDAI)]
	ExitMarket Geoff cZRX
	Assert Equal (Controller AssetsIn Geoff) [(Address vDAI) (Address cOMG) (Address vBAT) (Address cREP)]
	ExitMarket Geoff cREP
	Assert Equal (Controller AssetsIn Geoff) [(Address vDAI) (Address cOMG) (Address vBAT)]
	ExitMarket Geoff cOMG
	Assert Equal (Controller AssetsIn Geoff) [(Address vDAI) (Address vBAT)]
	ExitMarket Geoff vDAI
	Assert Equal (Controller AssetsIn Geoff) [(Address vBAT)]
	ExitMarket Geoff vBAT
	Assert Equal (Controller AssetsIn Geoff) []

Test "Realistic Market Scenario"
	PricedController
	ListedVToken ZRX cZRX
	SetPriceCF cZRX 0.002 0.4
	ListedEtherToken vETH
	Controller SetCollateralFactor vEth 0.8
	ListedVToken BAT vBAT
	SetPriceCF vBAT 0.0015 0.3
	-- Mint some cZRX and vETH
	Prep Geoff 1250e18 ZRX cZRX
	Mint Geoff 1250e18 cZRX -- Liquidity -> 0.4 * 0.002 * 1250e18 = 1.0e18
	SendMintEth Geoff 2.5e18 vETH -- Liqiuidity -> 0.8 * 1.0 * 2.5e18 = 2.0e18
	-- Check liquidity is zero when not in any markets
	Assert Equal (Controller Liquidity Geoff) Zero
	-- Enter ZRX and check liquidity
	EnterMarkets Geoff cZRX
	Assert Equal (Controller Liquidity Geoff) 1.0e18
	-- Fail to borrow BAT due to liquidity
	Give vBAT 1000e18 BAT
	HoldInvariants
	Borrow Geoff 1000e18 vBAT -- 1000e18 * 0.0015 = 1.5e18 required liquidity
							  -- But since we're only in ZRX, we only have 1.0e18 liquidity
	Assert Failure CONTROLLER_REJECTION BORROW_CONTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
	-- Enter vETH and check liquidity
	EnterMarkets Geoff vETH
	Assert Equal (Controller Liquidity Geoff) 3.0e18 -- Sum of vETH and cZRX liquidity from above
	-- Borrow previous BAT amount given liquidity
	Borrow Geoff 1000e18 vBAT
	Assert Equal (Controller Liquidity Geoff) 1.5e18 -- Less the borrow amount's toll
	-- Try to exit a eth market but fail due to given borrow requiring eth as collateral
	HoldInvariants
	ExitMarket Geoff vETH
	Assert Failure REJECTION EXIT_MARKET_REJECTION INSUFFICIENT_LIQUIDITY -- Liquidity check fails
	Assert Equal (Controller AssetsIn Geoff) [(Address cZRX) (Address vBAT) (Address vETH)]
	-- Repay some borrow and exit market OMG
	Allow Geoff vBAT
	RepayBorrow Geoff 500e18 vBAT
	Assert Equal (Controller Liquidity Geoff) 2.25e18 -- With 0.75e18 repaid
	ExitMarket Geoff vETH
	Assert Equal (Controller AssetsIn Geoff) [(Address cZRX) (Address vBAT)]
	Assert Equal (Controller Liquidity Geoff) 0.25e18 -- Less Eth's 2.0e18 collateral weight
	-- Try and exit vBAT (firist without, then after, repaying)
	HoldInvariants
	ExitMarket Geoff vBAT
	Assert Failure NONZERO_BORROW_BALANCE EXIT_MARKET_BALANCE_OWED
	RepayBorrow Geoff UInt256Max vBAT
	ExitMarket Geoff vBAT
	Assert Equal (Controller AssetsIn Geoff) [(Address cZRX)]
	Assert Equal (Controller Liquidity Geoff) 1.0e18 -- Back to just cZRX
	-- Exit cZRX
	ExitMarket Geoff cZRX
	Assert Equal (Controller AssetsIn Geoff) []
	Assert Equal (Controller Liquidity Geoff) 0e18 -- Back to nothing
