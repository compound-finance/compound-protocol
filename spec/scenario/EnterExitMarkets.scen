-- Enter and Exit Markets Tests

Test "Enter Markets Idempotent"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	Assert Equal (Comptroller AssetsIn Geoff) []
	ListedXToken ZRX cZRX
	EnterMarkets Geoff cZRX
	Assert Log MarketEntered (cToken (Address cZRX)) (account (Address Geoff))
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff cZRX)
	ListedXToken OMG cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff cZRX)
	Assert True (Comptroller CheckMembership Geoff cOMG)
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX) (Address cOMG)]

Test "Entered Market Must Be Supported"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	ListedXToken ZRX cZRX
	EnterMarkets Geoff cZRX
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	NewXToken OMG cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff cZRX)
	Assert False (Comptroller CheckMembership Geoff cOMG)
	Support cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff cZRX)
	Assert True (Comptroller CheckMembership Geoff cOMG)

Test "Exit single market"
	NewComptroller
	ListedXToken ZRX cZRX
	EnterMarkets Geoff cZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX)]
	ExitMarket Geoff cZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit non-entered market"
	NewComptroller
	ListedXToken ZRX cZRX
	ExitMarket Geoff cZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit one of two market from the front"
	NewComptroller
	ListedXToken ZRX cZRX
	ListedXToken OMG cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX) (Address cOMG)]
	ExitMarket Geoff cZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cOMG)]

Test "Exit one of two market from the back"
	NewComptroller
	ListedXToken ZRX cZRX
	ListedXToken OMG cOMG
	EnterMarkets Geoff cZRX cOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX) (Address cOMG)]
	ExitMarket Geoff cOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX)]

Test "Exit multiple markets"
	NewComptroller
	ListedXToken ZRX cZRX
	ListedXToken OMG cOMG
	ListedXToken BAT cBAT
	ListedXToken REP cREP
	ListedXToken DAI cDAI
	EnterMarkets Geoff cZRX cOMG cBAT cREP cDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX) (Address cOMG) (Address cBAT) (Address cREP) (Address cDAI)]
	ExitMarket Geoff cZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cDAI) (Address cOMG) (Address cBAT) (Address cREP)]
	ExitMarket Geoff cREP
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cDAI) (Address cOMG) (Address cBAT)]
	ExitMarket Geoff cOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cDAI) (Address cBAT)]
	ExitMarket Geoff cDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cBAT)]
	ExitMarket Geoff cBAT
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Realistic Market Scenario"
	PricedComptroller
	ListedXToken ZRX cZRX
	SetPriceCF cZRX 0.002 0.4
	ListedEtherToken cETH
	Comptroller SetCollateralFactor cEth 0.8
	ListedXToken BAT cBAT
	SetPriceCF cBAT 0.0015 0.3
	-- Mint some cZRX and cETH
	Prep Geoff 1250e18 ZRX cZRX
	Mint Geoff 1250e18 cZRX -- Liquidity -> 0.4 * 0.002 * 1250e18 = 1.0e18
	SendMintEth Geoff 2.5e18 cETH -- Liqiuidity -> 0.8 * 1.0 * 2.5e18 = 2.0e18
	-- Check liquidity is zero when not in any markets
	Assert Equal (Comptroller Liquidity Geoff) Zero
	-- Enter ZRX and check liquidity
	EnterMarkets Geoff cZRX
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18
	-- Fail to borrow BAT due to liquidity
	Give cBAT 1000e18 BAT
	HoldInvariants
	Borrow Geoff 1000e18 cBAT -- 1000e18 * 0.0015 = 1.5e18 required liquidity
							  -- But since we're only in ZRX, we only have 1.0e18 liquidity
	Assert RevertCustomError BorrowComptrollerRejection 4
	-- Enter cETH and check liquidity
	EnterMarkets Geoff cETH
	Assert Equal (Comptroller Liquidity Geoff) 3.0e18 -- Sum of cETH and cZRX liquidity from above
	-- Borrow previous BAT amount given liquidity
	Borrow Geoff 1000e18 cBAT
	Assert Equal (Comptroller Liquidity Geoff) 1.5e18 -- Less the borrow amount's toll
	-- Try to exit a eth market but fail due to given borrow requiring eth as collateral
	HoldInvariants
	ExitMarket Geoff cETH
	Assert Failure REJECTION EXIT_MARKET_REJECTION INSUFFICIENT_LIQUIDITY -- Liquidity check fails
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX) (Address cETH) (Address cBAT)]
	-- Repay some borrow and exit market OMG
	Allow Geoff cBAT
	RepayBorrow Geoff 500e18 cBAT
	Assert Equal (Comptroller Liquidity Geoff) 2.25e18 -- With 0.75e18 repaid
	ExitMarket Geoff cETH
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX) (Address cBAT)]
	Assert Equal (Comptroller Liquidity Geoff) 0.25e18 -- Less Eth's 2.0e18 collateral weight
	-- Try and exit cBAT (firist without, then after, repaying)
	HoldInvariants
	ExitMarket Geoff cBAT
	Assert Failure NONZERO_BORROW_BALANCE EXIT_MARKET_BALANCE_OWED
	RepayBorrow Geoff UInt256Max cBAT
	ExitMarket Geoff cBAT
	Assert Equal (Comptroller AssetsIn Geoff) [(Address cZRX)]
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18 -- Back to just cZRX
	-- Exit cZRX
	ExitMarket Geoff cZRX
	Assert Equal (Comptroller AssetsIn Geoff) []
	Assert Equal (Comptroller Liquidity Geoff) 0e18 -- Back to nothing
