-- NewController, but with markets listed so that we can make them vtx markets in constructor
Macro FlywheelController price=1.0 borrowRate=0.000005 vtxInitAmount=5000000e18
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    ----g2
    ControllerImpl Deploy ScenarioG2 ControllerScenG2
    Unitroller SetPendingImpl ControllerScenG2
    ControllerImpl ControllerScenG2 BecomeG2
    --list some tokens
    Controller SetPriceOracle (PriceOracleProxy Address)
    Controller SetMaxAssets 20
    Controller SetCloseFactor 0.5
    Controller LiquidationIncentive 1.1
    NewVToken ZRX cZRX
    NewVToken BAT vBAT
    Support cZRX collateralFactor:0.5
    Support vBAT collateralFactor:0.5
    -- final
    ControllerImpl Deploy ScenarioG3 ControllerScen
    Unitroller SetPendingImpl ControllerScen
    ControllerImpl ControllerScen BecomeG3 1e18 [cZRX vBAT]
    Erc20 Deploy Standard VTX "VTX Token" 18
    Give (Address Controller) vtxInitAmount VTX
    Controller Send "setVtxAddress(address)" (Address VTX)

Macro InitSpeeds
    Prep Geoff 100e18 ZRX cZRX
    Mint Geoff 50e18 cZRX--tokenbalance = 50e18 / 2e9 = 2.5e10
    Prep Coburn Some BAT vBAT
    Mint Coburn 6e18 vBAT--tokenbalance = 6e18 / 2e9 = 3e9
    EnterMarkets Coburn vBAT
    Borrow Coburn 1e18 cZRX
    Controller RefreshVtxSpeeds

Test "Accrue VTX during a mint"
    FlywheelController
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Controller VtxAccrued Geoff) 0
    Mint Geoff 1e18 cZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Controller VtxAccrued Geoff) 0
    Assert Equal (Controller VtxSupplyState cZRX "index") 1.2000000000001e49
    Assert Equal (Controller VtxSupplyState cZRX "block") 300000
    Assert Equal (Erc20 VTX TokenBalance Geoff) 300000e18
    Assert Equal (Controller VtxSupplierIndex cZRX Geoff) 1.2000000000001e49

Test "Accrue VTX during a borrow"
    FlywheelController
    InitSpeeds
    Controller FastForward 300000 Blocks
    Assert Equal (Controller VtxAccrued Coburn) 0
    Borrow Coburn 0.1e18 cZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 =  3.00001e41
    Assert Equal (Controller VtxAccrued Coburn) 0
    Assert Equal (Controller VtxBorrowState cZRX "index") 3.00001e41
    Assert Equal (Controller VtxBorrowState cZRX "block") 300000
    Assert Equal (Erc20 VTX TokenBalance Coburn) 300000e18
    Assert Equal (Controller VtxBorrowerIndex cZRX Coburn) 3.00001e41

Test "Accrue VTX during a redeem"
    FlywheelController
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Controller VtxAccrued Geoff) 0
    Redeem Geoff 1e9 cZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Controller VtxAccrued Geoff) 0
    Assert Equal (Controller VtxSupplyState cZRX "index") 1.2000000000001e49
    Assert Equal (Controller VtxSupplyState cZRX "block") 300000
    Assert Equal (Erc20 VTX TokenBalance Geoff) 300000e18
    Assert Equal (Controller VtxSupplierIndex cZRX Geoff) 1.2000000000001e49

Test "Accrue VTX during a repayBorrow"
    FlywheelController
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Controller VtxAccrued Geoff) 0
    Prep Coburn 0.5e18 ZRX cZRX
    RepayBorrow Coburn 0.5e18 cZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 =  3.00001e41
    Assert Equal (Controller VtxAccrued Coburn) 0
    Assert Equal (Controller VtxBorrowState cZRX "index") 3.00001e41
    Assert Equal (Controller VtxBorrowState cZRX "block") 300000
    Assert Equal (Erc20 VTX TokenBalance Coburn) 300000e18
    Assert Equal (Controller VtxBorrowerIndex cZRX Coburn) 3.00001e41

Test "Accrue VTX during a repayBorrowBehalf of 0"
    FlywheelController
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Controller VtxAccrued Geoff) 0
    -- confirm we can init all flywheel accounts for free
    RepayBorrowBehalf Jared Coburn 0 cZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 = 3.00001e41
    Assert Equal (Controller VtxAccrued Coburn) 0
    Assert Equal (Controller VtxBorrowState cZRX "index") 3.00001e41
    Assert Equal (Controller VtxBorrowState cZRX "block") 300000
    Assert Equal (Erc20 VTX TokenBalance Coburn) 300000e18
    Assert Equal (Controller VtxBorrowerIndex cZRX Coburn) 3.00001e41

Test "Accrue VTX during a liquidation"
    FlywheelController
    InitSpeeds
    Assert Equal (Controller VtxSpeed cZRX) 1e18
    Assert Equal (Controller VtxSpeed vBAT) 0
    --coburn zrx borrow, bat supply. geoff zrx supply
    FastForward 600000 Blocks--1e18 borrow * (1 + 600000 * 0.000005) = 3.5e18 borrow > 6e18 collateral * 0.5 CF
    Prep Geoff Some ZRX cZRX
    From Geoff (VToken cZRX Liquidate Coburn vBAT 0.5e18)
    -- zrx borrow index is updated and vtx distributed
    -- * new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- * new index = 1e36 + 600000 * 1e18 * 1e36 / 1e18 = 6.00001E41
    Assert Equal (Controller VtxBorrowState cZRX "index") 6.00001e41
    Assert Equal (Controller VtxBorrowState cZRX "block") 600000
    -- zrx supply index isnt updated and vtx isnt distributed for zrx supply
    Assert Equal (Controller VtxSupplyState cZRX "index") 1e36
    Assert Equal (Controller VtxSupplyState cZRX "block") 0
    Assert Equal (Controller VtxSupplierIndex cZRX Geoff) 1e36--no change, minted in init
    -- bat supply/borrow index is not updated, since there is no vtx speed
    Assert Equal (Controller VtxSupplyState vBAT "index") 1e36
    Assert Equal (Controller VtxSupplyState vBAT "block") 600000
    -- neither is borrow state. block is 0 because update fn is never even called
    Assert Equal (Controller VtxBorrowState vBAT "index") 1e36
    Assert Equal (Controller VtxBorrowState vBAT "block") 0
    --
    Assert Equal (Controller VtxSupplierIndex vBAT Coburn) 1e36
    Assert Equal (Controller VtxBorrowerIndex cZRX Coburn) 6.00001e41
    Assert Equal (Erc20 VTX TokenBalance Coburn) 600000e18
    Assert Equal (Controller VtxAccrued Coburn) 0
    --
    Assert Equal (Controller VtxSupplierIndex vBAT Geoff) 1e36
    Assert Equal (Erc20 VTX TokenBalance Geoff) 0
    Assert Equal (Controller VtxAccrued Geoff) 0

Test "Accrue VTX during a transfer"
    FlywheelController
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Erc20 VTX TokenBalance Geoff) 0
    Assert Equal (Controller VtxSupplierIndex cZRX Geoff) 1e36
    Transfer Geoff Jared 2.5e10 cZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Erc20 VTX TokenBalance Geoff) 300000e18
    Assert Equal (Controller VtxAccrued Geoff) 0
    Assert Equal (Controller VtxSupplyState cZRX "index") 1.2000000000001e49
    Assert Equal (Controller VtxSupplyState cZRX "block") 300000
    Assert Equal (Controller VtxSupplierIndex cZRX Geoff) 1.2000000000001e49
    --
    Assert Equal (Controller VtxAccrued Jared) 0
    Assert Equal (Controller VtxSupplyState cZRX "index") 1.2000000000001e49
    Assert Equal (Controller VtxSupplyState cZRX "block") 300000
    Assert Equal (Controller VtxSupplierIndex cZRX Jared) 1.2000000000001e49

Test "Accrues correctly when market is added, deactivated, and activated again"
    FlywheelController
    InitSpeeds
    NewVToken DAI vDAI
    --
    Support vDAI collateralFactor:0.5
    Controller AddVtxMarkets vDAI
    Assert Equal (Controller GetVtxMarkets) [(Address cZRX) (Address vBAT) (Address vDAI)]
    Prep Jared Some DAI vDAI
    Mint Jared 6e18 vDAI
    EnterMarkets Geoff cZRX
    Borrow Geoff 0.5e18 vDAI
    Borrow Coburn 0.5e18 vDAI
    Controller RefreshVtxSpeeds
    Assert Equal (Controller VtxSpeed cZRX) 0.5e18
    Assert Equal (Controller VtxSpeed vDAI) 0.5e18
    --
    FastForward 100 Blocks
    Controller DropVtxMarket vDAI
    Controller ClaimVtx Geoff
    Assert Equal (Erc20 VTX TokenBalance Geoff) 75e18--half of vdai, all of zrx(.25e18 + .5e18) * 100
    Assert Equal (Controller GetVtxMarkets) [(Address cZRX) (Address vBAT)]
    Assert Equal (Controller VtxSpeed cZRX) 1e18
    Assert Equal (Controller VtxSpeed vDAI) 0
    --
    FastForward 100 Blocks
    Controller ClaimVtx Geoff
    Assert Equal (Erc20 VTX TokenBalance Geoff) 175e18-- += 1e18 * 100
    Assert Equal (Controller VtxAccrued Geoff) 0
    --
    Controller AddVtxMarkets vDAI
    FastForward 100 Blocks
    Controller ClaimVtx Geoff
    Assert Equal (Erc20 VTX TokenBalance Geoff) 250e18--half of vdai, all of zrx. += (.25 + .5) * 100
    Assert Equal (Controller VtxAccrued Geoff) 0

Test "TransferVtx handles running out of VTX in Controller correctly"
    FlywheelController price:1.0 borrowRate:0.000005 vtxInitAmount:1e18
    InitSpeeds
    FastForward 2 Blocks
    Controller ClaimVtx Geoff
    Assert Equal (Controller VtxAccrued Geoff) 2e18
    Assert Equal (Erc20 VTX TokenBalance Geoff) 0
    Give (Address Controller) 1e18 VTX
    Controller ClaimVtx Geoff
    Assert Equal (Controller VtxAccrued Geoff) 0
    Assert Equal (Erc20 VTX TokenBalance Geoff) 2e18

Test "Changing VTX rate continues to distribute at the correct speed"
    FlywheelController
    InitSpeeds
    --
    Assert Equal (Controller VtxSpeed cZRX) 1e18
    FastForward 10 Blocks
    Controller SetVtxRate 2e18
    Assert Equal (Controller VtxSpeed cZRX) 2e18
    FastForward 10 Blocks
    Controller ClaimVtx Geoff
    Assert Equal (Controller VtxAccrued Geoff) 0
    Assert Equal (Erc20 VTX TokenBalance Geoff) 30e18
