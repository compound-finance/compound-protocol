-- NewComptroller, but with markets listed so that we can make them comp markets in constructor
Macro FlywheelComptroller price=1.0 borrowRate=0.000005 compInitAmount=5000000e18
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    ----g2
    ComptrollerImpl Deploy ScenarioG2 ComptrollerScenG2
    Unitroller SetPendingImpl ComptrollerScenG2
    ComptrollerImpl ComptrollerScenG2 BecomeG2
    --list some tokens
    Comptroller SetPriceOracle (PriceOracleProxy Address)
    Comptroller SetMaxAssets 20
    Comptroller SetCloseFactor 0.5
    Comptroller LiquidationIncentive 1.1
    NewCToken ZRX cZRX
    NewCToken BAT cBAT
    Support cZRX collateralFactor:0.5
    Support cBAT collateralFactor:0.5
    -- final
    ComptrollerImpl Deploy ScenarioG3 ComptrollerScen
    Unitroller SetPendingImpl ComptrollerScen
    ComptrollerImpl ComptrollerScen BecomeG3 1e18 [cZRX cBAT]
    Erc20 Deploy Standard COMP "COMP Token" 18
    Give (Address Comptroller) compInitAmount COMP
    Comptroller Send "setCompAddress(address)" (Address COMP)

Macro InitSpeeds
    Prep Geoff 100e18 ZRX cZRX
    Mint Geoff 50e18 cZRX--tokenbalance = 50e18 / 2e9 = 2.5e10
    Prep Coburn Some BAT cBAT
    Mint Coburn 6e18 cBAT--tokenbalance = 6e18 / 2e9 = 3e9
    EnterMarkets Coburn cBAT
    Borrow Coburn 1e18 cZRX
    Comptroller RefreshCompSpeeds

Test "Accrue COMP during a mint"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller CompAccrued Geoff) 0
    Mint Geoff 1e18 cZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Comptroller CompAccrued Geoff) 0
    Assert Equal (Comptroller CompSupplyState cZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller CompSupplyState cZRX "block") 300000
    Assert Equal (Erc20 COMP TokenBalance Geoff) 300000e18
    Assert Equal (Comptroller CompSupplierIndex cZRX Geoff) 1.2000000000001e49

Test "Accrue COMP during a borrow"
    FlywheelComptroller
    InitSpeeds
    Comptroller FastForward 300000 Blocks
    Assert Equal (Comptroller CompAccrued Coburn) 0
    Borrow Coburn 0.1e18 cZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 =  3.00001e41
    Assert Equal (Comptroller CompAccrued Coburn) 0
    Assert Equal (Comptroller CompBorrowState cZRX "index") 3.00001e41
    Assert Equal (Comptroller CompBorrowState cZRX "block") 300000
    Assert Equal (Erc20 COMP TokenBalance Coburn) 300000e18
    Assert Equal (Comptroller CompBorrowerIndex cZRX Coburn) 3.00001e41

Test "Accrue COMP during a redeem"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller CompAccrued Geoff) 0
    Redeem Geoff 1e9 cZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Comptroller CompAccrued Geoff) 0
    Assert Equal (Comptroller CompSupplyState cZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller CompSupplyState cZRX "block") 300000
    Assert Equal (Erc20 COMP TokenBalance Geoff) 300000e18
    Assert Equal (Comptroller CompSupplierIndex cZRX Geoff) 1.2000000000001e49

Test "Accrue COMP during a repayBorrow"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller CompAccrued Geoff) 0
    Prep Coburn 0.5e18 ZRX cZRX
    RepayBorrow Coburn 0.5e18 cZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 =  3.00001e41
    Assert Equal (Comptroller CompAccrued Coburn) 0
    Assert Equal (Comptroller CompBorrowState cZRX "index") 3.00001e41
    Assert Equal (Comptroller CompBorrowState cZRX "block") 300000
    Assert Equal (Erc20 COMP TokenBalance Coburn) 300000e18
    Assert Equal (Comptroller CompBorrowerIndex cZRX Coburn) 3.00001e41

Test "Accrue COMP during a repayBorrowBehalf of 0"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller CompAccrued Geoff) 0
    -- confirm we can init all flywheel accounts for free
    RepayBorrowBehalf Jared Coburn 0 cZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 = 3.00001e41
    Assert Equal (Comptroller CompAccrued Coburn) 0
    Assert Equal (Comptroller CompBorrowState cZRX "index") 3.00001e41
    Assert Equal (Comptroller CompBorrowState cZRX "block") 300000
    Assert Equal (Erc20 COMP TokenBalance Coburn) 300000e18
    Assert Equal (Comptroller CompBorrowerIndex cZRX Coburn) 3.00001e41

Test "Accrue COMP during a liquidation"
    FlywheelComptroller
    InitSpeeds
    Assert Equal (Comptroller CompSpeed cZRX) 1e18
    Assert Equal (Comptroller CompSpeed cBAT) 0
    --coburn zrx borrow, bat supply. geoff zrx supply
    FastForward 600000 Blocks--1e18 borrow * (1 + 600000 * 0.000005) = 3.5e18 borrow > 6e18 collateral * 0.5 CF
    Prep Geoff Some ZRX cZRX
    From Geoff (CToken cZRX Liquidate Coburn cBAT 0.5e18)
    -- zrx borrow index is updated and comp distributed
    -- * new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- * new index = 1e36 + 600000 * 1e18 * 1e36 / 1e18 = 6.00001E41
    Assert Equal (Comptroller CompBorrowState cZRX "index") 6.00001e41
    Assert Equal (Comptroller CompBorrowState cZRX "block") 600000
    -- zrx supply index isnt updated and comp isnt distributed for zrx supply
    Assert Equal (Comptroller CompSupplyState cZRX "index") 1e36
    Assert Equal (Comptroller CompSupplyState cZRX "block") 0
    Assert Equal (Comptroller CompSupplierIndex cZRX Geoff) 1e36--no change, minted in init
    -- bat supply/borrow index is not updated, since there is no comp speed
    Assert Equal (Comptroller CompSupplyState cBAT "index") 1e36
    Assert Equal (Comptroller CompSupplyState cBAT "block") 600000
    -- neither is borrow state. block is 0 because update fn is never even called
    Assert Equal (Comptroller CompBorrowState cBAT "index") 1e36
    Assert Equal (Comptroller CompBorrowState cBAT "block") 0
    --
    Assert Equal (Comptroller CompSupplierIndex cBAT Coburn) 1e36
    Assert Equal (Comptroller CompBorrowerIndex cZRX Coburn) 6.00001e41
    Assert Equal (Erc20 COMP TokenBalance Coburn) 600000e18
    Assert Equal (Comptroller CompAccrued Coburn) 0
    --
    Assert Equal (Comptroller CompSupplierIndex cBAT Geoff) 1e36
    Assert Equal (Erc20 COMP TokenBalance Geoff) 0
    Assert Equal (Comptroller CompAccrued Geoff) 0

Test "Accrue COMP during a transfer"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Erc20 COMP TokenBalance Geoff) 0
    Assert Equal (Comptroller CompSupplierIndex cZRX Geoff) 1e36
    Transfer Geoff Jared 2.5e10 cZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Erc20 COMP TokenBalance Geoff) 300000e18
    Assert Equal (Comptroller CompAccrued Geoff) 0
    Assert Equal (Comptroller CompSupplyState cZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller CompSupplyState cZRX "block") 300000
    Assert Equal (Comptroller CompSupplierIndex cZRX Geoff) 1.2000000000001e49
    --
    Assert Equal (Comptroller CompAccrued Jared) 0
    Assert Equal (Comptroller CompSupplyState cZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller CompSupplyState cZRX "block") 300000
    Assert Equal (Comptroller CompSupplierIndex cZRX Jared) 1.2000000000001e49

Test "Accrues correctly when market is added, deactivated, and activated again"
    FlywheelComptroller
    InitSpeeds
    NewCToken DAI cDAI
    --
    Support cDAI collateralFactor:0.5
    Comptroller AddCompMarkets cDAI
    Assert Equal (Comptroller GetCompMarkets) [(Address cZRX) (Address cBAT) (Address cDAI)]
    Prep Jared Some DAI cDAI
    Mint Jared 6e18 cDAI
    EnterMarkets Geoff cZRX
    Borrow Geoff 0.5e18 cDAI
    Borrow Coburn 0.5e18 cDAI
    Comptroller RefreshCompSpeeds
    Assert Equal (Comptroller CompSpeed cZRX) 0.5e18
    Assert Equal (Comptroller CompSpeed cDAI) 0.5e18
    --
    FastForward 100 Blocks
    Comptroller DropCompMarket cDAI
    Comptroller ClaimComp Geoff
    Assert Equal (Erc20 COMP TokenBalance Geoff) 75e18--half of cdai, all of zrx(.25e18 + .5e18) * 100
    Assert Equal (Comptroller GetCompMarkets) [(Address cZRX) (Address cBAT)]
    Assert Equal (Comptroller CompSpeed cZRX) 1e18
    Assert Equal (Comptroller CompSpeed cDAI) 0
    --
    FastForward 100 Blocks
    Comptroller ClaimComp Geoff
    Assert Equal (Erc20 COMP TokenBalance Geoff) 175e18-- += 1e18 * 100
    Assert Equal (Comptroller CompAccrued Geoff) 0
    --
    Comptroller AddCompMarkets cDAI
    FastForward 100 Blocks
    Comptroller ClaimComp Geoff
    Assert Equal (Erc20 COMP TokenBalance Geoff) 250e18--half of cdai, all of zrx. += (.25 + .5) * 100
    Assert Equal (Comptroller CompAccrued Geoff) 0

Test "TransferComp handles running out of COMP in Comptroller correctly"
    FlywheelComptroller price:1.0 borrowRate:0.000005 compInitAmount:1e18
    InitSpeeds
    FastForward 2 Blocks
    Comptroller ClaimComp Geoff
    Assert Equal (Comptroller CompAccrued Geoff) 2e18
    Assert Equal (Erc20 COMP TokenBalance Geoff) 0
    Give (Address Comptroller) 1e18 COMP
    Comptroller ClaimComp Geoff
    Assert Equal (Comptroller CompAccrued Geoff) 0
    Assert Equal (Erc20 COMP TokenBalance Geoff) 2e18

Test "Changing COMP rate continues to distribute at the correct speed"
    FlywheelComptroller
    InitSpeeds
    --
    Assert Equal (Comptroller CompSpeed cZRX) 1e18
    FastForward 10 Blocks
    Comptroller SetCompRate 2e18
    Assert Equal (Comptroller CompSpeed cZRX) 2e18
    FastForward 10 Blocks
    Comptroller ClaimComp Geoff
    Assert Equal (Comptroller CompAccrued Geoff) 0
    Assert Equal (Erc20 COMP TokenBalance Geoff) 30e18
