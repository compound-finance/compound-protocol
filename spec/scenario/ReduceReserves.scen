
Test "Reduce all reserves and verify effects"
    NewController
    ListedVToken ZRX cZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX cZRX
    Mint Geoff 50e18 cZRX
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 500e8) -- 50e18 / 1e9
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX cZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance cZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken cZRX Reserves) (Exactly 1e18)
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out all of our reserves (1e18)
    ReduceReserves 1e18 cZRX
    Assert Equal (Erc20 ZRX TokenBalance cZRX) (Exactly 54e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 1e18)
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken cZRX Reserves) (Exactly 0e18)
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.0e18+0.0e18-0.0e18)/500.0e8
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1.08e9)

Test "Reduce partial reserves and verify effects"
    NewController
    ListedVToken ZRX cZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX cZRX
    Mint Geoff 50e18 cZRX
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX cZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance cZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken cZRX Reserves) (Exactly 1e18)
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out all of our reserves (1e18)
    ReduceReserves 0.5e18 cZRX
    Assert Equal (Erc20 ZRX TokenBalance cZRX) (Exactly 54.5e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0.5e18)
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken cZRX Reserves) (Exactly 0.5e18)
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.5e18+0.5e18-0.0e18)/500.0e8
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1.08e9)

Test "Redeem all and then reduce all reserves"
    NewController
    ListedVToken ZRX cZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX cZRX
    Mint Geoff 50e18 cZRX
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX cZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance cZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken cZRX Reserves) (Exactly 1e18)
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1.08e9)
    -- Now let's redeem all
    Redeem Geoff 500e8 cZRX
    -- Check our values
    Assert Equal (Erc20 ZRX TokenBalance Geoff) (Exactly 54e18)
    Assert Equal (Erc20 ZRX TokenBalance cZRX) (Exactly 1e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 0e8)
    Assert Equal (VToken cZRX Reserves) (Exactly 1e18)
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 0e18)
    -- 0 tokens implies initial exchange rate
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1e9)
    -- Then now, let's pull out all of our reserves (1e18)
    ReduceReserves 1e18 cZRX
    Assert Equal (Erc20 ZRX TokenBalance Geoff) (Exactly 54e18)
    Assert Equal (Erc20 ZRX TokenBalance cZRX) (Exactly 0e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 1e18)
    Assert Equal (Erc20 cZRX TokenBalance Geoff) (Exactly 0e8)
    Assert Equal (VToken cZRX Reserves) (Exactly 0e18)
    Assert Equal (VToken cZRX UnderlyingBalance Geoff) (Exactly 0e18)
    -- 0 tokens implies initial exchange rate
    Assert Equal (VToken cZRX ExchangeRate) (Exactly 1e9)

Test "Reduce reserves WBTC when paused"
    NewController
    ListedVToken WBTC cWBTC initialExchangeRate:1e9 tokenType:WBTC
    Prep Geoff 50e18 WBTC cWBTC
    Mint Geoff 50e18 cWBTC
    Assert Equal (Erc20 cWBTC TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (VToken cWBTC UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (VToken cWBTC ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC cWBTC 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Invariant Remains (Erc20 WBTC TokenBalance cWBTC) (Exactly 55e18)
    Invariant Remains (Erc20 WBTC TokenBalance Root) (Exactly 0e18)
    Invariant Remains (Erc20 cWBTC TokenBalance Geoff) (Exactly 500e8)
    Invariant Remains (VToken cWBTC Reserves) (Exactly 1e18)
    Invariant Remains (VToken cWBTC UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Invariant Remains (VToken cWBTC ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out all of our reserves (1e18)
    Erc20 WBTC Pause
    AllowFailures
    ReduceReserves 1e18 cWBTC
    Assert Revert
