
Macro NewBorrow borrowAmount mintAmount borrowRate=0.000005 user=Geoff collateralPrice=1.0 borrowPrice=1.0 liquidationIncentive=1.1
    PricedComptroller closeFactor:0.9 -- Set the close factor high to reduce number of steps to demonstrate
    Comptroller LiquidationIncentive liquidationIncentive
    NewXToken ZRX cZRX
    NewXToken BAT cBAT borrowRate
    Give cBAT 10e18 BAT -- Faucet some bat to borrow
    PriceOracle SetPrice cZRX collateralPrice
    Support cZRX collateralFactor:0.7
    PriceOracle SetPrice cBAT borrowPrice
    Support cBAT collateralFactor:0
    SimpleBorrow user borrowAmount mintAmount

Macro SimpleBorrow user borrowAmount mintAmount
    Prep user mintAmount ZRX cZRX
    Mint user mintAmount cZRX
    EnterMarkets user cZRX cBAT
    Borrow user borrowAmount cBAT

Test "When account goes further underwater than the liquidation incentive and cannot pay down debt fully"
    -- Happens whenever collateral ratio > liquidation discount (i.e. 1 / liquidation incentive)
    --
    -- Start right around the liquidity threshold
    NewBorrow borrowAmount:1e18 mintAmount:1.43e18 liquidationIncentive:1.1
    --
    -- Verify that the borrow results in the correct state
    Assert Equal (XToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (XToken cZRX UnderlyingBalance Geoff) 1.43e18
    --
    -- Put the account underwater s.t. 0.91 < Borrow/Supply
    --      i.e. (1 / liquidationIncentive) < Borrow/Supply
    PriceOracle SetPrice cZRX 0.76
    --
    -- Pay back a bunch of debt by liquidating
    Prep Jared 10e18 BAT cBAT
    Liquidate Jared "->" Geoff 0.9e18 cBAT "Seizing" cZRX
    Assert Equal (XToken cBAT BorrowBalance Geoff) 0.1e18
    Assert Equal (XToken cZRX UnderlyingBalance Geoff) 0.127368422e18
    -- Do it again, and note that the collateral is gone but borrows remain
    --  if we had set the close factor lower, it would just take more steps
    Liquidate Jared "->" Geoff 0.0880000008e18 cBAT "Seizing" cZRX
    Assert Equal (XToken cBAT BorrowBalance Geoff) 0.0119999992e18
    Assert Equal (XToken cZRX UnderlyingBalance Geoff) 0

Test "When liquidation incentive is too high to be effective"
    -- Happens whenever liquidation discount < collateral factor
    --
    -- Start right around the liquidity threshold
    NewBorrow borrowAmount:1e18 mintAmount:1.43e18 liquidationIncentive:1.5
    --
    -- Verify that the borrow results in the correct state
    Assert Equal (XToken cBAT BorrowBalance Geoff) 1e18
    Assert Equal (XToken cZRX UnderlyingBalance Geoff) 1.43e18
    --
    -- Put the account underwater s.t. 0.7 < Borrow/Supply
    --              i.e. collateral factor < Borrow/Supply
    PriceOracle SetPrice cZRX 0.87
    --
    -- Now any amount of debt that we pay back by liquidating will make liquidity worse
    --
    -- First, prepare to liquidate
    Prep Jared 10e18 BAT cBAT
    Expect Changes (Comptroller Liquidity Geoff) -0.024999999076e18
    -- Note that the account collateral ratio will become worse than before
    --  although shortfall decreases in absolute terms
    --  had Supply/Borrow = 1.430000000 * 0.87 / 1.0 = 1.244100000
    --  now Supply/Borrow = 0.567931036 * 0.87 / 0.5 = 1.135862072
    --
    -- Now perform the liquidation
    Liquidate Jared "->" Geoff 0.5e18 cBAT "Seizing" cZRX
    --
    -- Verify that the liquidation went through
    Assert Equal (XToken cBAT BorrowBalance Geoff) 0.5e18
    Assert Equal (XToken cZRX UnderlyingBalance Geoff) 0.567931036e18
    --
    -- Test succeeded which means our expectation was correct
    --  liquidity went down after a liquidation!
    --
    -- Now lets see that lowering the incentive and liquidating improves the situation
    Comptroller LiquidationIncentive 1.2
    Expect Changes (Comptroller Liquidity Geoff) 0.016000000294e18
    Liquidate Jared "->" Geoff 0.1e18 cBAT "Seizing" cZRX
