
liquidateBorrowFresh(uint result, address liquidator, address borrower, uint256 repayAmount)
description "Break liquidate" {
    // Pre/action/post environments
    env e0;
    env e1;
    env e2;

    require e1.block.number >= e0.block.number;
    require e2.block.number >= e1.block.number;

    // Any other account
    address other;
    require other != liquidator && other != borrower && other != currentContract;

    // We assume this cannot happen
    //  OQ: should we enforce in the code such that it need not be assumed?
    require borrower != currentContract;
    require liquidator != currentContract;
    require borrower != sinvoke otherToken(e0);
    require liquidator != sinvoke otherToken(e0);

    // We check if the borrowed token and the collateral token have the same underlying
    //  which affects whether or not collateral cash should have changed or not
    bool borrowCashIsCollateralCash = sinvoke underlying(e0) == sinvoke underlyingInOther(e0);

    /*
      - no effect on exchange rate
      - self-liquidate has no effect
      |---------------------+--------+------------+----------+-------|
      |                     | XToken | Liquidator | Borrower | Other |
      |---------------------+--------+------------+----------+-------|
      | cash                |   +A   |     -A     |     0    |   0   |
      | borrows             |   -A   |      0     |    -A    |   0   |
      | tokens              |    0   |      0     |     0    |   0   |
      | reserves            |    0   |            |          |       |
      | collateral cash     |    0   |    -A/0    |     0    |   0   |
      | collateral borrows  |    0   |      0     |     0    |   0   |
      | collateral tokens   |    0   |     +T     |    -T    |   0   |
      | collateral reserves |    0   |            |          |       |
      |---------------------+--------+------------+----------+-------|
    */

    /* Pre */

    // borrowed
    uint256 exchangeRatePre = sinvoke exchangeRateStored(e0);

    uint256 cTokenCashPre = sinvoke getCash(e0);
    uint256 liquidatorCashPre = sinvoke getCashOf(e0, liquidator);
    uint256 borrowerCashPre = sinvoke getCashOf(e0, borrower);
    uint256 otherCashPre = sinvoke getCashOf(e0, other);

    uint256 cTokenBorrowsPre = sinvoke totalBorrows(e0);
    uint256 liquidatorBorrowsPre = sinvoke borrowBalanceStored(e0, liquidator);
    uint256 borrowerBorrowsPre = sinvoke borrowBalanceStored(e0, borrower);
    uint256 otherBorrowsPre = sinvoke borrowBalanceStored(e0, other);

    uint256 cTokenTokensPre = sinvoke totalSupply(e0);
    uint256 liquidatorTokensPre = sinvoke balanceOf(e0, liquidator);
    uint256 borrowerTokensPre = sinvoke balanceOf(e0, borrower);
    uint256 otherTokensPre = sinvoke balanceOf(e0, other);

    uint256 cTokenReservesPre = sinvoke totalReserves(e0);

    // collateral
    uint256 collateralExchangeRatePre = sinvoke exchangeRateStoredInOther(e0);

    uint256 collateralCashPre = sinvoke getCashInOther(e0);
    uint256 liquidatorCollateralCashPre = sinvoke getCashOfInOther(e0, liquidator);
    uint256 borrowerCollateralCashPre = sinvoke getCashOfInOther(e0, borrower);
    uint256 otherCollateralCashPre = sinvoke getCashOfInOther(e0, other);

    uint256 collateralBorrowsPre = sinvoke totalBorrowsInOther(e0);
    uint256 liquidatorCollateralBorrowsPre = sinvoke borrowBalanceStoredInOther(e0, liquidator);
    uint256 borrowerCollateralBorrowsPre = sinvoke borrowBalanceStoredInOther(e0, borrower);
    uint256 otherCollateralBorrowsPre = sinvoke borrowBalanceStoredInOther(e0, other);

    uint256 collateralTokensPre = sinvoke totalSupplyInOther(e0);
    uint256 liquidatorCollateralTokensPre = sinvoke balanceOfInOther(e0, liquidator);
    uint256 borrowerCollateralTokensPre = sinvoke balanceOfInOther(e0, borrower);
    uint256 otherCollateralTokensPre = sinvoke balanceOfInOther(e0, other);

    uint256 collateralReservesPre = sinvoke totalReservesInOther(e0);

    // Just Do It
    // Note: cTokenCollateral is linked via Compound.spclnk in order to support checking its balances
    //  not perfect since it only proves the balance sheet is safe for a particular token configuration
    require result == invoke liquidateBorrowFreshPub(e1, liquidator, borrower, repayAmount);
    bool liquidateBorrowFreshReverted = lastReverted;

    /* Post */

    // borrowed
    uint256 exchangeRatePost = sinvoke exchangeRateStored(e2);

    uint256 cTokenCashPost = sinvoke getCash(e2);
    uint256 liquidatorCashPost = sinvoke getCashOf(e2, liquidator);
    uint256 borrowerCashPost = sinvoke getCashOf(e2, borrower);
    uint256 otherCashPost = sinvoke getCashOf(e2, other);

    uint256 cTokenBorrowsPost = sinvoke totalBorrows(e2);
    uint256 liquidatorBorrowsPost = sinvoke borrowBalanceStored(e2, liquidator);
    uint256 borrowerBorrowsPost = sinvoke borrowBalanceStored(e2, borrower);
    uint256 otherBorrowsPost = sinvoke borrowBalanceStored(e2, other);

    uint256 cTokenTokensPost = sinvoke totalSupply(e2);
    uint256 liquidatorTokensPost = sinvoke balanceOf(e2, liquidator);
    uint256 borrowerTokensPost = sinvoke balanceOf(e2, borrower);
    uint256 otherTokensPost = sinvoke balanceOf(e2, other);

    uint256 cTokenReservesPost = sinvoke totalReserves(e2);

    // collateral
    uint256 collateralExchangeRatePost = sinvoke exchangeRateStoredInOther(e2);

    uint256 collateralCashPost = sinvoke getCashInOther(e2);
    uint256 liquidatorCollateralCashPost = sinvoke getCashOfInOther(e2, liquidator);
    uint256 borrowerCollateralCashPost = sinvoke getCashOfInOther(e2, borrower);
    uint256 otherCollateralCashPost = sinvoke getCashOfInOther(e2, other);

    uint256 collateralBorrowsPost = sinvoke totalBorrowsInOther(e2);
    uint256 liquidatorCollateralBorrowsPost = sinvoke borrowBalanceStoredInOther(e2, liquidator);
    uint256 borrowerCollateralBorrowsPost = sinvoke borrowBalanceStoredInOther(e2, borrower);
    uint256 otherCollateralBorrowsPost = sinvoke borrowBalanceStoredInOther(e2, other);

    uint256 collateralTokensPost = sinvoke totalSupplyInOther(e2);
    uint256 liquidatorCollateralTokensPost = sinvoke balanceOfInOther(e2, liquidator);
    uint256 borrowerCollateralTokensPost = sinvoke balanceOfInOther(e2, borrower);
    uint256 otherCollateralTokensPost = sinvoke balanceOfInOther(e2, other);

    uint256 collateralReservesPost = sinvoke totalReservesInOther(e2);

    // Measure
    bool staticBalance =
        (exchangeRatePost == exchangeRatePre) &&
        (cTokenCashPost == cTokenCashPre) &&
        (cTokenBorrowsPost == cTokenBorrowsPre) &&
        (cTokenTokensPost == cTokenTokensPre) &&
        (cTokenReservesPost == cTokenReservesPre) &&
        (liquidatorCashPost == liquidatorCashPre) &&
        (liquidatorBorrowsPost == liquidatorBorrowsPre) &&
        (liquidatorTokensPost == liquidatorTokensPre) &&
        (borrowerCashPost == borrowerCashPre) &&
        (borrowerBorrowsPost == borrowerBorrowsPre) &&
        (borrowerTokensPost == borrowerTokensPre) &&
        (otherCashPost == otherCashPre) &&
        (otherBorrowsPost == otherBorrowsPre) &&
        (otherTokensPost == otherTokensPre) &&

        (collateralExchangeRatePost == collateralExchangeRatePre) &&
        (collateralCashPost == collateralCashPre) &&
        (collateralBorrowsPost == collateralBorrowsPre) &&
        (collateralTokensPost == collateralTokensPre) &&
        (collateralReservesPost == collateralReservesPre) &&
        (liquidatorCollateralCashPost == liquidatorCollateralCashPre) &&
        (liquidatorCollateralBorrowsPost == liquidatorCollateralBorrowsPre) &&
        (liquidatorCollateralTokensPost == liquidatorCollateralTokensPre) &&
        (borrowerCollateralCashPost == borrowerCollateralCashPre) &&
        (borrowerCollateralBorrowsPost == borrowerCollateralBorrowsPre) &&
        (borrowerCollateralTokensPost == borrowerCollateralTokensPre) &&
        (otherCollateralCashPost == otherCollateralCashPre) &&
        (otherCollateralBorrowsPost == otherCollateralBorrowsPre) &&
        (otherCollateralTokensPost == otherCollateralTokensPre);

    bool dynamicBalance =
        (repayAmount != 0) &&
        (exchangeRatePost == exchangeRatePre) &&
        (cTokenCashPost == cTokenCashPre + repayAmount) &&
        (cTokenBorrowsPost == cTokenBorrowsPre - repayAmount) &&
        (cTokenTokensPost == cTokenTokensPre) &&
        (cTokenReservesPost == cTokenReservesPre) &&
        (liquidatorCashPost == liquidatorCashPre - repayAmount) &&
        (liquidatorBorrowsPost == liquidatorBorrowsPre) &&
        (liquidatorTokensPost == liquidatorTokensPre) &&
        (borrowerCashPost == borrowerCashPre) &&
        (borrowerBorrowsPost == borrowerBorrowsPre - repayAmount) &&
        (borrowerTokensPost == borrowerTokensPre) &&
        (otherCashPost == otherCashPre) &&
        (otherBorrowsPost == otherBorrowsPre) &&
        (otherTokensPost == otherTokensPre) &&
        (borrowerCollateralCashPost == borrowerCollateralCashPre) &&

        (collateralExchangeRatePost == collateralExchangeRatePre) &&
        (collateralCashPost == collateralCashPre) &&
        (collateralBorrowsPost == collateralBorrowsPre) &&
        (collateralTokensPost == collateralTokensPre) &&
        (collateralReservesPost == collateralReservesPre) &&
        (liquidatorCollateralCashPost == liquidatorCollateralCashPre || (borrowCashIsCollateralCash && liquidatorCollateralCashPost == liquidatorCollateralCashPre - repayAmount)) &&
        (liquidatorCollateralBorrowsPost == liquidatorCollateralBorrowsPre) &&
        (liquidatorCollateralTokensPost - liquidatorCollateralTokensPre == borrowerCollateralTokensPre - borrowerCollateralTokensPost) &&
        (borrowerCollateralCashPost == borrowerCollateralCashPre) &&
        (borrowerCollateralBorrowsPost == borrowerCollateralBorrowsPre) &&
        (otherCollateralCashPost == otherCollateralCashPre) &&
        (otherCollateralBorrowsPost == otherCollateralBorrowsPre) &&
        (otherCollateralTokensPost == otherCollateralTokensPre);


    assert (!liquidateBorrowFreshReverted =>
            ((result != 0 || repayAmount == 0 || liquidator == borrower) <=> staticBalance)), "Mismatch in static case";
    assert (!liquidateBorrowFreshReverted =>
            ((result == 0 && repayAmount != 0 && liquidator != currentContract) <=> dynamicBalance)), "Mismatch in dynamic case";
}

seize(uint result, address liquidator, address borrower, uint256 seizeTokens)
description "Break seize" {
    // Pre/action/post environments
    env e0;
    env e1;
    env e2;

    require e1.block.number >= e0.block.number;
    require e2.block.number >= e1.block.number;

    // Any other account
    address other;
    require other != liquidator && other != borrower && other != currentContract;

    /*
      - no effect on exchange rate
      |----------+--------+------------+----------+-------|
      |          | XToken | Liquidator | Borrower | Other |
      |----------+--------+------------+----------+-------|
      | cash     |    0   |      0     |     0    |   0   |
      | borrows  |    0   |      0     |     0    |   0   |
      | tokens   |    0   |     +T     |    -T    |   0   |
      | reserves |    0   |            |          |       |
      |----------+--------+------------+----------+-------|
    */

    /* Pre */

    uint256 exchangeRatePre = sinvoke exchangeRateStored(e0);

    uint256 cTokenCashPre = sinvoke getCash(e0);
    uint256 liquidatorCashPre = sinvoke getCashOf(e0, liquidator);
    uint256 borrowerCashPre = sinvoke getCashOf(e0, borrower);
    uint256 otherCashPre = sinvoke getCashOf(e0, other);

    uint256 cTokenBorrowsPre = sinvoke totalBorrows(e0);
    uint256 liquidatorBorrowsPre = sinvoke borrowBalanceStored(e0, liquidator);
    uint256 borrowerBorrowsPre = sinvoke borrowBalanceStored(e0, borrower);
    uint256 otherBorrowsPre = sinvoke borrowBalanceStored(e0, other);

    uint256 cTokenTokensPre = sinvoke totalSupply(e0);
    uint256 liquidatorTokensPre = sinvoke balanceOf(e0, liquidator);
    uint256 borrowerTokensPre = sinvoke balanceOf(e0, borrower);
    uint256 otherTokensPre = sinvoke balanceOf(e0, other);

    uint256 cTokenReservesPre = sinvoke totalReserves(e0);

    // Just Do It
    require result == invoke seize(e1, liquidator, borrower, seizeTokens);
    bool seizeReverted = lastReverted;

    /* Post */

    uint256 exchangeRatePost = sinvoke exchangeRateStored(e2);

    uint256 cTokenCashPost = sinvoke getCash(e2);
    uint256 liquidatorCashPost = sinvoke getCashOf(e2, liquidator);
    uint256 borrowerCashPost = sinvoke getCashOf(e2, borrower);
    uint256 otherCashPost = sinvoke getCashOf(e2, other);

    uint256 cTokenBorrowsPost = sinvoke totalBorrows(e2);
    uint256 liquidatorBorrowsPost = sinvoke borrowBalanceStored(e2, liquidator);
    uint256 borrowerBorrowsPost = sinvoke borrowBalanceStored(e2, borrower);
    uint256 otherBorrowsPost = sinvoke borrowBalanceStored(e2, other);

    uint256 cTokenTokensPost = sinvoke totalSupply(e2);
    uint256 liquidatorTokensPost = sinvoke balanceOf(e2, liquidator);
    uint256 borrowerTokensPost = sinvoke balanceOf(e2, borrower);
    uint256 otherTokensPost = sinvoke balanceOf(e2, other);

    uint256 cTokenReservesPost = sinvoke totalReserves(e2);

    // Measure
    bool staticBalance =
        (exchangeRatePost == exchangeRatePre) &&
        (cTokenCashPost == cTokenCashPre) &&
        (cTokenBorrowsPost == cTokenBorrowsPre) &&
        (cTokenTokensPost == cTokenTokensPre) &&
        (cTokenReservesPost == cTokenReservesPre) &&
        (liquidatorCashPost == liquidatorCashPre) &&
        (liquidatorBorrowsPost == liquidatorBorrowsPre) &&
        (liquidatorTokensPost == liquidatorTokensPre) &&
        (borrowerCashPost == borrowerCashPre) &&
        (borrowerBorrowsPost == borrowerBorrowsPre) &&
        (borrowerTokensPost == borrowerTokensPre) &&
        (otherCashPost == otherCashPre) &&
        (otherBorrowsPost == otherBorrowsPre) &&
        (otherTokensPost == otherTokensPre);

    bool dynamicBalance =
        (seizeTokens != 0) &&
        (exchangeRatePost == exchangeRatePre) &&
        (cTokenCashPost == cTokenCashPre) &&
        (cTokenBorrowsPost == cTokenBorrowsPre) &&
        (cTokenTokensPost == cTokenTokensPre) &&
        (cTokenReservesPost == cTokenReservesPre) &&
        (liquidatorCashPost == liquidatorCashPre) &&
        (liquidatorBorrowsPost == liquidatorBorrowsPre) &&
        (liquidatorTokensPost == liquidatorTokensPre + seizeTokens) &&
        (borrowerCashPost == borrowerCashPre) &&
        (borrowerBorrowsPost == borrowerBorrowsPre) &&
        (borrowerTokensPost == borrowerTokensPre - seizeTokens) &&
        (otherCashPost == otherCashPre) &&
        (otherBorrowsPost == otherBorrowsPre) &&
        (otherTokensPost == otherTokensPre);

    assert (!seizeReverted =>
            ((result != 0 || seizeTokens == 0 || liquidator == borrower) <=> staticBalance)), "Mismatch in static case";
    assert (!seizeReverted =>
            ((result == 0 && seizeTokens != 0) <=> dynamicBalance)), "Mismatch in dynamic case";
}