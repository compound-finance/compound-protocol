
exchangeRateDecreases(uint result, address minter, uint256 mintAmount, uint256 mintTokens) {
    // Pre/action/post environments
    env e0;
    env e1;
    env e2;

    require e1.block.number >= e0.block.number;
    require e2.block.number >= e1.block.number;

    // Any other account
    address other;
    require other != minter && other != currentContract;
    require minter != currentContract;

    uint256 exchangeRatePre = sinvoke exchangeRateCurrent(e0);

    uint256 vTokenCashPre = sinvoke getCash(e0);
    uint256 vTokenBorrowsPre = sinvoke totalBorrows(e0);
    uint256 vTokenTokensPre = sinvoke totalSupply(e0);
    uint256 vTokenReservesPre = sinvoke totalReserves(e0);
    uint256 vTokenSupplyPre = vTokenCashPre + vTokenBorrowsPre - vTokenReservesPre;

    // Simplifying assumptions to analyze the vulnerability
    require vTokenBorrowsPre == 0; // XXX not necessary, simplifies analysis
    require vTokenSupplyPre >= 0; // XXX not necessary, should underflow
    require vTokenTokensPre > 0; // XXX not necessary
    require exchangeRatePre * vTokenTokensPre == vTokenSupplyPre * 1000000000000000000; // XXX

    // XXX why does this have to be after require?
    uint256 implicitExchangeRatePre = vTokenSupplyPre * 1000000000000000000 / vTokenTokensPre;

    require result == invoke mintFreshPub(e1, minter, mintAmount);
    bool mintFreshReverted = lastReverted;

    uint256 exchangeRatePost = sinvoke exchangeRateCurrent(e2);

    uint256 vTokenCashPost = sinvoke getCash(e2);
    uint256 vTokenBorrowsPost = sinvoke totalBorrows(e2);
    uint256 vTokenTokensPost = sinvoke totalSupply(e2);
    uint256 vTokenReservesPost = sinvoke totalReserves(e2);
    uint256 vTokenSupplyPost = vTokenCashPost + vTokenBorrowsPost - vTokenReservesPost;

    require mintTokens == vTokenTokensPost - vTokenTokensPre;
    require exchangeRatePre * mintTokens == mintAmount * 1000000000000000000;  // XXX why would this need to be assumed? should be proven

    uint256 implicitExchangeRatePost = vTokenSupplyPost * 1000000000000000000 / vTokenTokensPost;

    assert (!mintFreshReverted =>
            ((result != 0) => (exchangeRatePost == exchangeRatePre))), "Mismatch in failure case";
    assert (!mintFreshReverted => (exchangeRatePost >= exchangeRatePre)), "Exchange rate decreased";
    assert (!mintFreshReverted => (implicitExchangeRatePost >= implicitExchangeRatePre)), "Implicit exchange rate decreased";
}
